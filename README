Package sqlh is a small library of helpers to make basic queries less
verbose.  It's primary feature is selecting, inserting and updating
directly into and from structs.

Mapping columns to struct members is done via a `sql` struct
tag. There are 3 forms the struct tag can take:

The member can be ignored with `sql:"-"`.

It can be given a column mapping with `sql:"col_name"`.

And finally, it can be given a column mapping which is ignored in
specific contexts with `sql:"col_name/insert/update"`. The column name
comes before a sequence of "/" + context, where context is a query
or statement type such as select, update, or insert.

Below we show an example of typical use, given the following schema.

  CREATE TABLE T(
    id integer primary key autoincrement,
    name text not null,
    data text
  );

We can interact with it like this:

  type row struct {
    Id int64 sql:"id/insert/update"
    Name string sql:"name"
    Data *string sql:"data"
  }

  res, err := Insert(db, "T", row{Name:"a"})
  // INSERT INTO T(name, data) VALUES('a', NULL);

   _, err := Update(db, "T", row{Data:"updated"}, "id = ?", res.LastInsertId)
   // UPDATE T SET data = 'updated' WHERE id = 1;

   var dest row
   err = Scan(&dest, "select * from T limit 1")

In the example, we avoid inserting the primary key, as the DBMS can
handle that. In the update, note that only the data column is
set. This is because struct fields with a zero-value are ignored in an
update (the same rule does not apply to insert).

